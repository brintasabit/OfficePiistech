
@{
    ViewBag.Title = "LinqIndex";
}

<h2>Linq Index</h2>

<script type="text/x-handlebars-template" id="handlebarTemplate">

    <table class="table table-bordered">
        <thead class="LinqThead" id="LinqThead">
            <tr>
                <td>Employee Id</td>
                <td>Name</td>
                <td>Email</td>
                <td>Age</td>
                <td>Salary</td>
            </tr>
        </thead>

        {{#EmployeeInfo}}
        <tbody>
            <tr>
                <td>{{EmployeeId}}</td>
                <td>{{Name}}</td>
                <td>{{Email}}</td>
                <td>{{Age}}</td>
                <td>{{Salary}}</td>
            </tr>
        </tbody>
        {{/EmployeeInfo}}
    </table>
    <div class="pagination">
        <a onclick=ajaxPageCall("{{this}}")>Previous</a>
        {{#forTotalPage totalPage}}
        <a onclick=ajaxPageCall("{{this}}")>{{this}}</a>
        {{/forTotalPage}}

    </div>
    
</script>
<script type="text/javascript">
    var requestData = {
        pageNo: $('pageNo').val(),
        EmployeeId: $('EmployeeId').val(),
        Name: $('Name').val(),
        Email: $('Email').val(),
        Age: $('Age').val(),
        Salary: $('Salary').val()
    };

    $(function () {
        $.ajax({
            url: '/Linq/LinqJson',
            type: 'POST',
            data: JSON.stringify(requestData),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                console.log("AJAX Call 1");
                console.log("DOM loaded");
                var template = $("#handlebarTemplate").html();
                var sourceHtml = Handlebars.compile(template);
                $("#handlebar").html(sourceHtml(data));
                console.log("Total Number Of Data: ",data.fetchData);
                console.log("Total Number Of Data On This Page: ",data.numberOfDataPerPage);
                console.log("Total Index: ",data.totalPage);
                console.log("Current Index: ",data.pageNo);
            },
            error: function () {
                alert("Error occured!");
            }
        });
    });

    var ajaxPageCall = function (pageNo) {
        $.ajax({
            url: '/Linq/LinqJson?pageNo=' + pageNo,
            type: 'POST',
            data: JSON.stringify(requestData),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                console.log("AJAX Call 2");
                var template = $("#handlebarTemplate").html();
                var sourceHtml = Handlebars.compile(template);
                $("#handlebar").html(sourceHtml(data));
                console.log("Total Number Of Data: ",data.fetchData);
                console.log("Total Number Of Data On This Page: ",data.numberOfDataPerPage);
                console.log("Total Index: ",data.totalPage);
                console.log("Current Index: ",pageNo);
            },
            error: function () {
                alert("Error occured!");
            }
        });
    };
    $.notify("LinQ Successful", "success");
    Handlebars.registerHelper('forTotalPage', function(n, block) {
        var totalLoop = '';
        for(var i = 1; i <= n; i++)
            totalLoop += block.fn(i);
        return totalLoop;
    });

</script>

<style>
    #LinqThead.LinqThead {
        background: black;
        color: white;
        text-align: center;
    }

    .pagination {
        display: inline-block;
        margin: 4px 4px;
    }

        .pagination a {
            color: black;
            float: left;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color .3s;
            border: 1px solid #ddd;
            margin: 4px 4px;
        }

            .pagination a.active {
                background-color: #4CAF50;
                color: white;
                border: 1px solid #4CAF50;
            }

            .pagination a:hover:not(.active) {
                background-color: 	#32CD32;
            }
</style>
<div id="handlebar">

</div>
